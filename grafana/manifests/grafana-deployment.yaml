---
apiVersion: v1
kind: Namespace
metadata:
  name: grafana

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config-ini
  namespace: grafana
data:
  grafana.ini: |
    app_mode = production
    instance_name = ${HOSTNAME}

    [server]
    protocol = http
    http_addr =
    http_port = 3000
    domain = grafana-prod.goepp.net
    enforce_domain = false
    root_url = https://grafana-prod.goepp.net
    serve_from_sub_path = false
    router_logging = false
    static_root_path = public
    enable_gzip = false
    cert_file =
    cert_key =
    socket = /tmp/grafana.sock
    cdn_url =
    read_timeout = 0

    [database]
    # Either "mysql", "postgres" or "sqlite3", it's your choice
    # type = postgres
    # host = grafana-prod-rw.cnpg-grafana.svc.cluster.local:5432
    # name = grafana
    # user = grafana
    # password = ***
    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    # url = postgres://grafana:***@grafana-prod-rw.cnpg-grafana.svc.cluster.local:5432/grafana

    [log]
    level = info

    [auth.anonymous]
    enabled = true

    [unified_alerting]
    rule_version_record_limit = 5
    deleted_rule_retention = 1d

    # [plugin.grafana-image-renderer]
    # rendering_verbose_logging = true
    # rendering_dumpio = true

    # [rendering]
    # server_url = http://grafana-render.grafana.svc.cluster.local:8081/render
    # callback_url = https://grafana-prod.goepp.net/

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: grafana
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      containers:
      - name: grafana
        image: grafana/grafana:12.1.1-ubuntu
        imagePullPolicy: Always
        env:
          - name: GF_INSTALL_PLUGINS
            value: "victoriametrics-metrics-datasource"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
        volumeMounts:
        - name: grafana-config-ini
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: grafana-plugins
          mountPath: /var/lib/grafana/plugins
        envFrom:
          - secretRef:
              name: grafana-secrets
        ports:
        - name: http
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /
            port: 3000
        livenessProbe:
          httpGet:
            path: /
            port: 3000
      volumes:
      - name: grafana-config-ini
        configMap:
          name: grafana-config-ini
          items:
          - key: grafana.ini
            path: grafana.ini
      - name: grafana-plugins
        hostPath:
          path: "/mnt/k3s-prod-data/grafana/plugins"


# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: grafana-renderer
#   namespace: grafana
#   labels:
#     app: grafana-renderer
# spec:
#   replicas: 1
#   strategy:
#     type: Recreate
#   selector:
#     matchLabels:
#       app: grafana-renderer
#   template:
#     metadata:
#       labels:
#         app: grafana-renderer
#     spec:
#       dnsConfig:
#         options:
#           - name: ndots
#             value: "1"
#       containers:
#       - name: grafana-renderer
#         image: grafana/grafana-image-renderer:latest
#         imagePullPolicy: IfNotPresent
#         resources:
#           requests:
#             cpu: "100m"
#             memory: "128Mi"
#           limits:
#             cpu: "200m"
#             memory: "256Mi"
#         ports:
#         - name: http
#           containerPort: 8081
#         readinessProbe:
#           httpGet:
#             path: /
#             port: 8081
#         livenessProbe:
#           httpGet:
#             path: /
#             port: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: grafana
spec:
  selector:
    app: grafana
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: grafana-render
#   namespace: grafana
# spec:
#   selector:
#     app: grafana-renderer
#   type: ClusterIP
#   ports:
#   - name: http
#     port: 8081
#     targetPort: 8081
#     protocol: TCP

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: grafana-ingress
  namespace: grafana
spec:
  entryPoints:
    - websecure
  routes:  
    - match: Host(`grafana-prod.goepp.net`) && PathPrefix(`/`)
      kind: Rule
      services:
        - name: grafana
          port: 3000
